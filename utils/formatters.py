from datetime import datetime
from typing import Optional
from models.ticket import Ticket, Reply


def format_ticket_for_group(ticket: Ticket) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_info = f"@{ticket.user_username}" if ticket.user_username else f"ID: {ticket.user_id}"
    
    if ticket.user_name:
        user_info = f"{ticket.user_name} ({user_info})"
    
    if ticket.created_at:
        if isinstance(ticket.created_at, str):
            created_time = ticket.created_at
        else:
            created_time = ticket.created_at.strftime("%d.%m.%Y %H:%M")
    else:
        created_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    return (
        f"üé´ <b>–ó–∞—è–≤–∫–∞ #{ticket.id}</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {created_time}\n"
        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{ticket.message_text}\n\n"
        f"üí¨ <i>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</i>"
    )


def format_reply_for_user(reply: Reply, ticket_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    admin_info = f"@{reply.admin_username}" if reply.admin_username else f"ID: {reply.admin_id}"
    
    if reply.admin_name:
        admin_info = f"{reply.admin_name} ({admin_info})"
    
    if reply.created_at:
        if isinstance(reply.created_at, str):
            created_time = reply.created_at
        else:
            created_time = reply.created_at.strftime("%d.%m.%Y %H:%M")
    else:
        created_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    return (
        f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        f"üë®‚Äçüíº <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_info}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {created_time}\n"
        f"üé´ <b>–ó–∞—è–≤–∫–∞:</b> #{ticket_id}\n\n"
        f"üí¨ <b>–û—Ç–≤–µ—Ç:</b>\n{reply.reply_text}"
    )


def format_ticket_confirmation(ticket: Ticket) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return (
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üé´ <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{ticket.id}\n"
        f"üìù <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {ticket.message_text[:100]}{'...' if len(ticket.message_text) > 100 else ''}\n\n"
        f"‚è≥ <i>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!</i>\n\n"
        f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏</i>"
    )


def format_ticket_status(ticket: Ticket) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status_emoji = {
        "new": "üÜï",
        "in_progress": "üîÑ", 
        "closed": "‚úÖ"
    }
    
    status_text = {
        "new": "–ù–æ–≤–∞—è",
        "in_progress": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "closed": "–ó–∞–∫—Ä—ã—Ç–∞"
    }
    
    if ticket.created_at:
        if isinstance(ticket.created_at, str):
            created_time = ticket.created_at
        else:
            created_time = ticket.created_at.strftime("%d.%m.%Y %H:%M")
    else:
        created_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if ticket.updated_at:
        if isinstance(ticket.updated_at, str):
            updated_time = ticket.updated_at
        else:
            updated_time = ticket.updated_at.strftime("%d.%m.%Y %H:%M")
    else:
        updated_time = "–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å"
    
    return (
        f"üé´ <b>–ó–∞—è–≤–∫–∞ #{ticket.id}</b>\n\n"
        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {ticket.message_text[:100]}{'...' if len(ticket.message_text) > 100 else ''}\n"
        f"{status_emoji.get(ticket.status.value, '‚ùì')} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text.get(ticket.status.value, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_time}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {updated_time}"
    )


def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."
